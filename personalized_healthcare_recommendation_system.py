# -*- coding: utf-8 -*-
"""Personalized_Healthcare_recommendation_system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PmY4SE51LtqahLshjN517JTrgeF0yEj2
"""

#importing packages and libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Load dataset
data = pd.read_csv("/content/blood.csv")

# Define features and target
X = data.drop(columns=["Class"])
y = data["Class"]

# Split into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Normalize numerical features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train Random Forest model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

# Evaluate the model
y_pred = model.predict(X_test_scaled)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Function to generate personalized recommendations
def generate_recommendation(patient_data):
    patient_df = pd.DataFrame([patient_data], columns=X.columns)
    patient_scaled = scaler.transform(patient_df)
    prediction = model.predict(patient_scaled)[0]
    return "Recommended for donation" if prediction == 1 else "Not recommended"

# Example usage
example_patient = [2, 20, 5000, 45]  # Example patient data
print("Recommendation:", generate_recommendation(example_patient))

import joblib
joblib.dump(model, "healthcare_model.pkl")
joblib.dump(scaler, "scaler.pkl")

!pip install streamlit scikit-learn pandas joblib

import streamlit as st
import pandas as pd
import joblib

# Load trained model and scaler
model = joblib.load("/content/healthcare_model.pkl")
scaler = joblib.load("/content/scaler.pkl")

# Define feature names
feature_names = ["Recency", "Frequency", "Monetary", "Time"]

# Streamlit App UI
st.title("Personalized Healthcare Recommendation System")
st.write("Enter the patient details below to get a recommendation.")

# Input fields for user
recency = st.number_input("Recency (months since last donation)", min_value=0, value=2)
frequency = st.number_input("Frequency (total donations)", min_value=0, value=20)
monetary = st.number_input("Monetary (total volume donated)", min_value=0, value=5000)
time = st.number_input("Time (months since first donation)", min_value=0, value=45)

# Predict button
if st.button("Get Recommendation"):
    # Prepare input data
    input_data = pd.DataFrame([[recency, frequency, monetary, time]], columns=feature_names)
    input_scaled = scaler.transform(input_data)

    # Make prediction
    prediction = model.predict(input_scaled)[0]

    # Display recommendation
    if prediction == 1:
        st.success("Recommended for donation!")
    else:
        st.error("Not recommended for donation.")

